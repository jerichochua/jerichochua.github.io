{"version":3,"sources":["components/Forecast.js","components/ForecastPeriod.js","components/ForecastList.js","components/Header.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Forecast","forecast","className","area","ForecastPeriod","forecastStart","forecastEnd","toLocaleString","ForecastList","forecasts","map","Header","title","defaultProps","Footer","isFetched","forecastLastUpdated","href","target","rel","App","props","state","validStartPeriod","validEndPeriod","axios","get","then","resp","setState","data","items","Date","valid_period","start","end","update_timestamp","catch","error","console","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAWeA,EATE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACI,sBAAKC,UAAU,WAAf,UACI,6BAAKD,EAASE,OACd,4BAAIF,EAASA,eCJZG,EAAiB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAC5C,OACI,8BACI,+BAAKD,EAAcE,iBAAnB,MAAwCD,EAAYC,uBCDnDC,EAAe,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWJ,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YACrD,OACI,gCACI,cAAC,EAAD,CAAgBD,cAAeA,EAAeC,YAAaA,IAC1DG,EAAUC,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAA8BA,SAAUA,GAAzBA,EAASE,aCNzDQ,EAAS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACI,wBAAQV,UAAU,SAAlB,SACI,6BAAKU,OAMjBD,EAAOE,aAAe,CAClBD,MAAO,qCAGID,QCJAG,EATA,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,oBACzB,OACI,yBAAQd,UAAU,SAAlB,UACI,wDAA2Ba,EAAYC,EAAoBT,iBAAmB,OAC9E,yCAAW,mBAAGU,KAAK,uBAAuBC,OAAO,SAASC,IAAI,sBAAnD,gC,iBCCFC,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTb,UAAW,GACXM,WAAW,EACXQ,iBAAkB,GAClBC,eAAgB,GAChBR,oBAAqB,IAPR,E,qDAWnB,WAAqB,IAAD,OAElBS,IAAMC,IAAI,kEACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZpB,UAAWmB,EAAKE,KAAKC,MAAM,GAAGtB,UAC9Bc,iBAAkB,IAAIS,KAAKJ,EAAKE,KAAKC,MAAM,GAAGE,aAAaC,OAC3DV,eAAgB,IAAIQ,KAAKJ,EAAKE,KAAKC,MAAM,GAAGE,aAAaE,KACzDnB,oBAAqB,IAAIgB,KAAKJ,EAAKE,KAAKC,MAAM,GAAGK,kBACjDrB,WAAW,OAGdsB,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,Q,oBAGhC,WACE,OACE,sBAAKpC,UAAU,YAAf,UACE,cAAC,EAAD,IACCsC,KAAKlB,MAAMP,UAAY,cAAC,EAAD,CAAcN,UAAW+B,KAAKlB,MAAMb,UAAWJ,cAAemC,KAAKlB,MAAMC,iBAAkBjB,YAAakC,KAAKlB,MAAME,iBAAqB,+DAChK,cAAC,EAAD,CAAQT,UAAWyB,KAAKlB,MAAMP,UAAWC,oBAAqBwB,KAAKlB,MAAMN,6B,GAhChDyB,cCKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b428301e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Forecast = ({ forecast }) => {\r\n    return (\r\n        <div className=\"forecast\">\r\n            <h3>{forecast.area}</h3>\r\n            <p>{forecast.forecast}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast\r\n","import React from 'react'\r\n\r\nexport const ForecastPeriod = ({ forecastStart, forecastEnd }) => {\r\n    return (\r\n        <div>\r\n            <h3>{forecastStart.toLocaleString()} - {forecastEnd.toLocaleString()}</h3>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Forecast from './Forecast'\r\nimport { ForecastPeriod } from './ForecastPeriod'\r\n\r\nexport const ForecastList = ({ forecasts, forecastStart, forecastEnd }) => {\r\n    return (\r\n        <div>\r\n            <ForecastPeriod forecastStart={forecastStart} forecastEnd={forecastEnd} />\r\n            {forecasts.map(forecast => <Forecast key={forecast.area} forecast={forecast} />)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nconst Header = ({ title }) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>{title}</h1>\r\n            {/* <a href=\"https://data.gov.sg/\">Source: data.gov.sg</a> */}\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title: '2 Hour Weather Forecast Singapore'\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Footer = ({ isFetched, forecastLastUpdated }) => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>Forecast last updated: {isFetched ? forecastLastUpdated.toLocaleString() : \"-\"}</p>\r\n            <p>Source: <a href=\"https://data.gov.sg/\" target=\"_blank\" rel=\"noopener noreferrer\">data.gov.sg</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\nimport { ForecastList } from './components/ForecastList';\nimport Header from './components/Header';\nimport Footer from  './components/Footer';\nimport axios from 'axios';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        forecasts: [],\n        isFetched: false,\n        validStartPeriod: \"\",\n        validEndPeriod: \"\",\n        forecastLastUpdated: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // Get 2 hour weather forecast\n    axios.get('https://api.data.gov.sg/v1/environment/2-hour-weather-forecast')\n    .then(resp => {\n      this.setState({\n        forecasts: resp.data.items[0].forecasts, \n        validStartPeriod: new Date(resp.data.items[0].valid_period.start),\n        validEndPeriod: new Date(resp.data.items[0].valid_period.end),\n        forecastLastUpdated: new Date(resp.data.items[0].update_timestamp),\n        isFetched: true\n      });\n    })\n    .catch(error => console.error(error));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        {this.state.isFetched ? <ForecastList forecasts={this.state.forecasts} forecastStart={this.state.validStartPeriod} forecastEnd={this.state.validEndPeriod} /> : <h3>Fetching weather forecasts...</h3>}\n        <Footer isFetched={this.state.isFetched} forecastLastUpdated={this.state.forecastLastUpdated} />\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}